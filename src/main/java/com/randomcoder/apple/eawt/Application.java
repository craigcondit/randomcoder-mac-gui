package com.randomcoder.apple.eawt;

import java.awt.Point;
import java.lang.reflect.*;

import com.randomcoder.apple.eawt.peer.ApplicationPeer;

/**
 * Wrapper around Apple's <code>Application</code> class, to allow linking on
 * non-Apple platforms.
 * 
 * <pre>
 * Copyright (c) 2007, Craig Condit. All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *     
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &quot;AS IS&quot;
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * </pre>
 */
public class Application
{
	private static Application INSTANCE = null;
	
	private final ApplicationPeer peer;
	
	/**
	 * Creates an Application wrapper. Useful for JavaBean environments.
	 */
	public Application()
	{
		peer = initializePeer(false);
	}
	
	private Application(ApplicationPeer peer)
	{
		this.peer = peer;
	}

	@SuppressWarnings("unchecked")
	private static ApplicationPeer initializePeer(boolean isStatic)
	throws IllegalArgumentException
	{
		String peerClassName = ApplicationPeer.class.getName() + "Impl";
		
		try
		{
			Class peerClass = Class.forName(peerClassName);
			if (isStatic)
			{
				Method method = peerClass.getMethod("getApplication");
				return (ApplicationPeer) method.invoke(null);
			}
			
			return (ApplicationPeer) peerClass.newInstance();
		}
		catch (InvocationTargetException e)
		{
			Throwable target = e.getTargetException();
			if (target instanceof RuntimeException)
				throw (RuntimeException) target;
			
			throw new IllegalArgumentException("Unknown error", e);
		}
		catch (Exception e)
		{
			throw new IllegalArgumentException("Apple GUI extensions unavailable", e);
		}
	}
	
	/**
	 * Determines if the Apple GUI extensions are available. This method must be
	 * called before attempting access to any additional functionality.
	 * 
	 * @return <code>true</code> if running on an Apple VM and functionality is
	 *         available
	 */
	public static boolean isSupported()
	{
		try
		{
			Class.forName("com.apple.eawt.Application");
		}
		catch (Exception e)
		{
			return false;
		}
		return true;
	}

	/**
	 * @return a singleton Application wrapper. Useful for AWT runtime
	 *         environments.
	 */
	public static synchronized Application getApplication()
	{
		if (INSTANCE == null)
			INSTANCE = new Application(initializePeer(true));

		return INSTANCE;
	}

	/**
	 * Adds the specified ApplicationListener as a receiver of callbacks from this
	 * class.
	 * 
	 * @param listener
	 *          an implementation of ApplicationListener that handles
	 *          ApplicationEventWrappers generated by this class
	 */
	public void addApplicationListener(ApplicationListener listener)
	{
		peer.addApplicationListener(listener);
	}

	/**
	 * Removes the specified ApplicationListener from being a receiver of
	 * callbacks from this class.
	 * 
	 * @param listener
	 *          an implementation of ApplicationListener that had previously been
	 *          registered to handle ApplicationEventWrappers generated by this
	 *          class
	 */
	public void removeApplicationListener(ApplicationListener listener)
	{
		peer.removeApplicationListener(listener);
	}

	/**
	 * Enables the Preferences item in the application menu. The
	 * ApplicationListener receives a callback for selection of the Preferences
	 * item in the application menu only if this is set to <code>true</code>.
	 * Because an application may not have a preferences window, by default this
	 * is set to <code>false</code>, meaning that the Preferences item in the
	 * application menu is grayed out and unselectable. If a Preferences item
	 * isn't present, this method adds and enables it.
	 * 
	 * @param enable
	 *          specifies whether the Preferences item in the application menu
	 *          should be enabled (<code>true</code>) or not (<code>false</code>)
	 */
	public void setEnabledPreferencesMenu(boolean enable)
	{
		peer.setEnabledPreferencesMenu(enable);
	}

	/**
	 * Enables the About item in the application menu. The ApplicationListener
	 * receives a callback for selection of the About item in the application menu
	 * only if this is set to <code>true</code>. Because AWT supplies a
	 * standard About window when an application may not, by default this is set
	 * to <code>true</code>. If the About item isn't present, this method adds
	 * and enables it.
	 * 
	 * @param enable
	 *          specifies whether the About item in the application menu should be
	 *          enabled (<code>true</code>) or not (<code>false</code>)
	 */
	public void setEnabledAboutMenu(boolean enable)
	{
		peer.setEnabledAboutMenu(enable);
	}

	/**
	 * Determines whether the Preferences item of the application menu is enabled.
	 */
	public boolean getEnabledPreferencesMenu()
	{
		return peer.getEnabledPreferencesMenu();
	}

	/**
	 * Determines whether the About item of the application menu is enabled.
	 */
	public boolean getEnabledAboutMenu()
	{
		return peer.getEnabledAboutMenu();
	}

	/**
	 * Determines whether the About item of the application menu is present.
	 */
	public boolean isAboutMenuItemPresent()
	{
		return peer.isAboutMenuItemPresent();
	}

	/**
	 * Adds the About item to the application menu if the item is not already
	 * present.
	 */
	public void addAboutMenuItem()
	{
		peer.addAboutMenuItem();
	}

	/**
	 * Removes the About item from the application menu if the item is present.
	 */
	public void removeAboutMenuItem()
	{
		peer.removeAboutMenuItem();
	}

	/**
	 * Determines whether the About Preferences of the application menu is
	 * present. By default there is no Preferences menu item.
	 */
	public boolean isPreferencesMenuItemPresent()
	{
		return peer.isPreferencesMenuItemPresent();
	}

	/**
	 * Adds the Preferences item to the application menu if the item is not
	 * already present.
	 */
	public void addPreferencesMenuItem()
	{
		peer.addPreferencesMenuItem();
	}

	/**
	 * Removes the Preferences item from the application menu if that item is
	 * present.
	 */
	public void removePreferencesMenuItem()
	{
		peer.removePreferencesMenuItem();
	}

	/**
	 * Determines the current location of the mouse as a Point within the onscreen
	 * viewable area.
	 * 
	 * @return the current position of the mouse on screen
	 */
	public static Point getMouseLocationOnScreen()
	{
		String peerClassName = ApplicationPeer.class.getName() + "Impl";
		
		try
		{
			Class peerClass = Class.forName(peerClassName);
			Method method = peerClass.getMethod("getMouseLocationOnScreen");
			return (Point) method.invoke(null);
		}
		catch (InvocationTargetException e)
		{
			Throwable target = e.getTargetException();
			if (target instanceof RuntimeException)
				throw (RuntimeException) target;
			
			throw new IllegalArgumentException("Unknown error", e);
		}
		catch (Exception e)
		{
			throw new IllegalArgumentException("Apple GUI extensions unavailable", e);
		}
	}
}